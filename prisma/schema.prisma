generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  sendingFollowRequests FollowRequest[] @relation("SendingFollowRequests")
  receivingFollowRequests FollowRequest[] @relation("ReceivingFollowRequests")
  blocks Block[] @relation("SendingBlock")
  blockedBy Block[] @relation("ReceivingBlock")
  stories Story[]
}

model Post {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers",fields:  [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings",fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("SendingFollowRequests",fields:  [senderId], references: [id], onDelete: Cascade)
  senderId String
  receiver User @relation("ReceivingFollowRequests",fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("SendingBlock",fields:  [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked User @relation("ReceivingBlock",fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  image String
}